{"version":3,"file":"ffp-generate.m.js","sources":["../src/abstractions/Gradient.js","../src/utils/draw-background.js","../src/controllers/make-pattern.js","../src/utils/draw-path.js","../src/utils/round-to.js","../src/controllers/symbols.js","../src/abstractions/Ground.js","../src/utils/create-canvas-from-context.js","../src/abstractions/SVGCanvas.js","../src/abstractions/Landscape.js","../src/abstractions/Line.js","../src/utils/array-random.js","../src/utils/prng.js","../src/controllers/erode.js","../src/utils/array-shuffle.js","../src/utils/array-median.js","../src/controllers/hue-rotate.js","../src/controllers/swatches.js","../src/index.js"],"sourcesContent":["import tumult from 'tumult'\nimport { normalize, radians, lerp } from 'missing-math'\n\nexport default class Gradient {\n  // IMPORTANT: f() should return a normalized value\n  constructor (f = (x, y, width, height) => 1) {\n    this.compute = f.bind(this)\n  }\n\n  static get methods () {\n    return Object.getOwnPropertyNames(Gradient)\n      .filter(prop => prop !== 'methods')\n      .filter(prop => typeof Gradient[prop] === 'function')\n  }\n\n  static normalize (x, y, width, height) {\n    return [\n      normalize(x, 0, width),\n      normalize(y, 0, height)\n    ]\n  }\n\n  static simplex ({\n    seed = null,\n    octaves = 2,\n    power = 1\n  } = {}) {\n    const frequency = Math.pow(2, octaves)\n    const simplex = new tumult.Simplex2(seed)\n    return new Gradient((x, y, width, height) => {\n      const [i, j] = Gradient.normalize(x, y, width, height)\n      return normalize(simplex.gen(i / frequency, j / frequency), -1, 1) ** power\n    })\n  }\n\n  static linear (alpha = 0) {\n    return new Gradient((x, y, width, height) => {\n      const [i, j] = Gradient.normalize(x, y, width, height)\n      const theta = radians(alpha)\n\n      const dirx = lerp(1 - i, i, (Math.sin(theta) + 1) / 2)\n      const diry = lerp(1 - j, j, (Math.cos(theta) + 1) / 2)\n      return ((dirx + diry) / 2)\n    })\n  }\n\n  static random (rng = Math.random) {\n    return new Gradient(rng)\n  }\n\n  static fix (value = 1) {\n    return new Gradient(() => value)\n  }\n}\n","export default (x, y, width, height, { ctx, color } = {}) => {\n  if (color === 'transparent') return\n\n  if (color) ctx.fillStyle = color\n  ctx.fillRect(x, y, width, height)\n}\n","import background from '../utils/draw-background'\n\nexport default symbol => {\n  return (x, y, {\n    ctx,\n    unit,\n    scale = 1,\n    foregroundColor = 'black',\n    backgroundColor = 'white'\n  } = {}) => {\n    ctx.isSVG && ctx.beginSVGGroup()\n\n    background(x, y, unit, unit, { ctx, color: backgroundColor })\n\n    ctx.fillStyle = foregroundColor\n    symbol(x, y, { ctx, unit, scale })\n\n    ctx.isSVG && ctx.endSVGGroup()\n  }\n}\n","export default (ctx, path) => {\n  ctx.beginPath()\n  path.forEach((point, index) => {\n    ctx[index === 0 ? 'moveTo' : 'lineTo'](...point)\n  })\n}\n","export default (value, nearest) => Math.floor(value / nearest) * nearest\n","import lineclip from 'lineclip'\nimport { radians } from 'missing-math'\n\nimport drawPath from '../utils/draw-path'\nimport roundTo from '../utils/round-to'\n\n/* eslint-disable camelcase */\n\nfunction steps (unit, step) {\n  return unit / step\n}\n\nconst symbols = {\n  empty: () => {},\n\n  debug: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    ctx.strokeStyle = 'black'\n    ctx.lineWidth = unit / 12\n    ctx.strokeRect(x, y, unit, unit)\n  },\n\n  square: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24))\n    if (thickness < 0) return\n\n    ctx.fillRect(x + (unit / 2) - thickness / 2, y + (unit / 2) - thickness / 2, thickness, thickness)\n  },\n\n  square_offset: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24)) - 10\n    if (thickness < 0) return\n\n    ctx.fillRect(x + (unit / 2) - thickness / 2, y + (unit / 2) - thickness / 2, thickness, thickness)\n  },\n\n  vertical_line: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24))\n    if (thickness < 0) return\n\n    ctx.fillRect(x + (unit / 2) - (thickness / 2), y, thickness, unit)\n  },\n\n  vertical_line_offset: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24)) - 10\n    if (thickness < 0) return\n\n    ctx.fillRect(x + (unit / 2) - (thickness / 2), y, thickness, unit)\n  },\n\n  horizontal_line: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24))\n    if (thickness < 0) return\n\n    ctx.fillRect(x, y + (unit / 2) - (thickness / 2), unit, thickness)\n  },\n\n  horizontal_line_offset: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24)) - 10\n    if (thickness < 0) return\n\n    ctx.fillRect(x, y + (unit / 2) - (thickness / 2), unit, thickness)\n  },\n\n  diagonal: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24))\n    if (thickness < 0) return\n\n    ctx.beginPath()\n    ctx.moveTo(x + unit - thickness, y)\n    ctx.lineTo(x + unit, y)\n    ctx.lineTo(x + thickness, y + unit)\n    ctx.lineTo(x, y + unit)\n    ctx.fill()\n  },\n\n  diamond: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const thickness = roundTo(unit * scale, steps(unit, 24)) - 1\n    if (thickness < 0) return\n\n    drawPath(ctx, lineclip.polygon([\n      [x + unit / 2, y + thickness],\n      [x + unit - thickness, y + unit / 2],\n      [x + unit / 2, y + unit - thickness],\n      [x + thickness, y + unit / 2]\n    ], [x, y, x + unit, y + unit]))\n    ctx.fill()\n  },\n\n  circle: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const diameter = roundTo((unit - 1) * scale, steps(unit, 24))\n    if (diameter < 0) return\n\n    const path = []\n    for (let alpha = 0; alpha < 360; alpha += (360 / 36)) {\n      const theta = radians(alpha)\n      path.push([\n        (x + unit / 2) + Math.sin(theta) * (diameter),\n        (y + unit / 2) + Math.cos(theta) * (diameter)\n      ])\n    }\n\n    drawPath(ctx, lineclip.polygon(path, [x, y, x + unit, y + unit]))\n    ctx.closePath()\n    ctx.fill()\n  },\n\n  ffp: (x, y, { ctx, unit, scale = 1 } = {}) => {\n    const gradient = 'FFP'.split('')\n    const char = gradient[Math.floor(Math.random() * gradient.length)]\n    if (!char) return\n\n    ctx.font = `${unit * 1.2}px Space Mono`\n    ctx.fillText(char, x, y + unit)\n  }\n}\n\nexport default symbols\n","import makePattern from '../controllers/make-pattern'\nimport symbols from '../controllers/symbols'\n\nimport createCanvasFromContext from '../utils/create-canvas-from-context'\n\nexport default class Ground {\n  constructor ({\n    width,\n    height,\n    unit = 24,\n    line,\n    gradient,\n    pattern = makePattern(symbols['debug']),\n    foregroundColor = 'black',\n    backgroundColor = 'white'\n  } = {}) {\n    this.width = width\n    this.height = height\n    this.unit = unit\n\n    this.line = line\n    this.gradient = gradient\n    this.pattern = pattern\n\n    this.backgroundColor = backgroundColor\n    this.foregroundColor = foregroundColor\n\n    this.grid = []\n    this.cells = []\n    this._populate()\n  }\n\n  _populate () {\n    for (let x = 0; x < this.width; x += this.unit) {\n      const i = Math.floor(x / this.unit)\n      const ystart = this.line.compute(i) * this.height\n      for (let y = ystart; y < this.height; y += this.unit) {\n        const j = Math.floor(y / this.unit)\n        this.setCell(i, j)\n      }\n    }\n  }\n\n  setCell (i, j) {\n    if (!this.grid[i]) this.grid[i] = []\n\n    const cell = {\n      i,\n      j,\n      x: i * this.unit,\n      y: j * this.unit,\n      shouldRender: true\n    }\n    this.grid[i][j] = cell\n    this.cells.push(cell)\n  }\n\n  hasCell (i, j) {\n    return this.grid[i] && this.grid[i][j]\n  }\n\n  isInFrontOf (x, y) {\n    const i = Math.floor(x / this.unit)\n    const j = Math.floor(y / this.unit)\n    return this.hasCell(i, j)\n  }\n\n  setBehind (grounds) {\n    this.grid.forEach(column => {\n      column.forEach(cell => {\n        if (!cell || !cell.shouldRender) return\n        cell.shouldRender = !grounds.some(ground => {\n          return ground.isInFrontOf(cell.x, cell.y)\n        })\n      })\n    })\n  }\n\n  get isEmpty () {\n    return !this.cells.find(cell => cell.shouldRender)\n  }\n\n  _updateAABB (x, y) {\n    this.aabb = this.aabb || {\n      xmin: Number.POSITIVE_INFINITY,\n      ymin: Number.POSITIVE_INFINITY,\n      xmax: Number.NEGATIVE_INFINITY,\n      ymax: Number.NEGATIVE_INFINITY\n    }\n\n    if (x < this.aabb.xmin) this.aabb.xmin = x\n    if (y < this.aabb.ymin) this.aabb.ymin = y\n    if (x > this.aabb.xmax) this.aabb.xmax = x\n    if (y > this.aabb.ymax) this.aabb.ymax = y\n  }\n\n  render (ctx) {\n    this.cells.forEach(cell => {\n      if (!cell.shouldRender) return\n      this._updateAABB(cell.x, cell.y)\n      this.pattern(cell.x, cell.y, {\n        ctx,\n        unit: this.unit,\n        backgroundColor: this.backgroundColor,\n        foregroundColor: this.foregroundColor,\n        scale: this.gradient.compute(cell.x, cell.y, this.width, this.height)\n      })\n    })\n  }\n\n  createSprite (ctx) {\n    if (ctx.isSVG) throw new Error('Sprite rendering only works on non-SVG context')\n\n    this.sprite = createCanvasFromContext(ctx)\n    this.render(this.sprite.getContext('2d'))\n  }\n}\n","export default ctx => {\n  if (ctx.isSVG) throw new Error('This function does not handle SVG context')\n\n  const canvas = document.createElement('canvas')\n  canvas.width = ctx.canvas.width\n  canvas.height = ctx.canvas.height\n\n  return canvas\n}\n","import Canvas from 'canvas2svg'\nimport FileSaver from 'file-saver'\n\nimport drawBackground from '../utils/draw-background'\n\n/* global Blob */\n\nexport default class SVGCanvas {\n  constructor (width, height, canvas) {\n    if (!width || !height) {\n      throw new Error('You must specify a width and a height')\n    }\n\n    this.width = width\n    this.height = height\n    this.canvas = canvas\n\n    if (this.canvas) {\n      this.canvas.width = this.width\n      this.canvas.height = this.height\n      this.canvas.style.width = this.width + 'px'\n      this.canvas.style.height = this.height + 'px'\n    }\n\n    this.ctx = this.canvas\n      ? this.canvas.getContext('2d')\n      : new Canvas(width, height)\n    this.ctx.isSVG = !this.canvas\n\n    // NOTE: canvas2svg uses context[save|restore] to handle svg grouping\n    // Theses aliases are designed to improve code readability\n    this.ctx.beginSVGGroup = this.ctx.save\n    this.ctx.endSVGGroup = this.ctx.restore\n    this.ctx.group = fn => {\n      this.ctx.isSVG && this.ctx.beginSVGGroup()\n      fn()\n      this.ctx.isSVG && this.ctx.endSVGGroup()\n    }\n  }\n\n  get context () { return this.ctx }\n\n  get svg () { return this.ctx.getSvg() }\n  get serializedSvg () { return this.ctx.getSerializedSvg(true) }\n\n  async toBlob (type) {\n    if (!type) type = this.ctx.isSVG ? 'image/svg+xml' : 'image/png'\n\n    if (!SVGCanvas.isSupportedMimeType(type)) {\n      throw new Error(`Invalid or unsupported mime type.\\nSupported mime types are: ${SVGCanvas.SUPPORTED_MIME_TYPES}`)\n    }\n\n    if (type === 'image/svg+xml' && !this.ctx.isSVG) {\n      throw new Error(`image/svg+xml mime type is not compatible with the current context.`)\n    }\n\n    return (type === 'image/svg+xml')\n      ? new Blob([this.serializedSvg], { type: 'image/svg+xml;charset=utf-8' })\n      : new Promise(resolve => this.canvas.toBlob(resolve, type))\n  }\n\n  didMount () {}\n\n  mount (parent, sibling = null) {\n    if (!parent || this.mounted) return\n\n    this.parent = parent\n    this.el = this.canvas || this.svg\n\n    if (sibling) this.parent.insertBefore(this.el, sibling)\n    else this.parent.appendChild(this.el)\n\n    this.mounted = true\n    this.didMount(this.el)\n  }\n\n  background (color) {\n    drawBackground(0, 0, this.width, this.height, { color, ctx: this.ctx })\n  }\n\n  copy (canvas = document.createElement('canvas')) {\n    if (this.ctx.isSVG) throw new Error('Copying canvas with SVG context is not supported yet')\n\n    canvas.width = this.width\n    canvas.height = this.height\n    const ctx = canvas.getContext('2d')\n\n    ctx.drawImage(this.canvas, 0, 0)\n    return canvas\n  }\n\n  clear () {\n    if (!this.ctx.isSVG) this.ctx.clearRect(0, 0, this.width, this.height)\n    else {\n      if (!this.mounted) return\n      this.el.querySelector('g').innerHTML = ''\n    }\n  }\n\n  static get SUPPORTED_MIME_TYPES () {\n    return [\n      'image/png',\n      'image/jpeg',\n      'image/svg+xml'\n    ]\n  }\n\n  static isSupportedMimeType (type) {\n    return SVGCanvas.SUPPORTED_MIME_TYPES.includes(type)\n  }\n\n  async save (filename = Date.now(), { type = 'image/png' } = {}) {\n    if (!SVGCanvas.isSupportedMimeType(type)) {\n      throw new Error(`Invalid or unsupported mime type.\\nSupported mime types are: ${SVGCanvas.SUPPORTED_MIME_TYPES}`)\n    }\n\n    const blob = await this.toBlob(type)\n    return FileSaver.saveAs(blob, filename)\n  }\n}\n","import SVGCanvas from '../abstractions/SVGCanvas'\n\nexport default class Landscape extends SVGCanvas {\n  constructor (grounds, {\n    canvas = null,\n    backgroundColor = 'transparent'\n  } = {}) {\n    super(grounds[0].width, grounds[0].height, canvas)\n\n    this.backgroundColor = backgroundColor\n    this.grounds = grounds\n  }\n\n  get grounds () { return this._grounds }\n  set grounds (grounds) {\n    let foregrounds = []\n    this._grounds = grounds.map((ground, index) => {\n      ground.setBehind(foregrounds)\n      if (ground.isEmpty) return null\n\n      foregrounds.push(ground)\n\n      if (!this.ctx.isSVG) {\n        ground.createSprite(this.ctx)\n      }\n\n      return ground\n    }).filter(Boolean)\n  }\n\n  _updateAABB ({ xmin, xmax, ymin, ymax }) {\n    this.aabb = this.aabb || {\n      xmin: Number.POSITIVE_INFINITY,\n      ymin: Number.POSITIVE_INFINITY,\n      xmax: Number.NEGATIVE_INFINITY,\n      ymax: Number.NEGATIVE_INFINITY\n    }\n\n    if (xmin < this.aabb.xmin) this.aabb.xmin = xmin\n    if (ymin < this.aabb.ymin) this.aabb.ymin = ymin\n    if (xmax > this.aabb.xmax) this.aabb.xmax = xmax\n    if (ymax > this.aabb.ymax) this.aabb.ymax = ymax\n  }\n\n  render (ctx = this.ctx) {\n    super.background(this.backgroundColor)\n\n    this.grounds.forEach((ground, index) => {\n      if (ground.sprite) ctx.drawImage(ground.sprite, 0, 0)\n      else ground.render(ctx)\n\n      this._updateAABB(ground.aabb)\n    })\n\n    return this\n  }\n\n  ensureSVGContext () {\n    return this.ctx.isSVG\n      ? this\n      : new Landscape(this.grounds, {\n        canvas: null,\n        backgroundColor: this.backgroundColor\n      }).render()\n  }\n\n  save (filename, { type } = {}) {\n    return (type === 'image/svg+xml' && !this.ctx.isSVG)\n      ? this.ensureSVGContext().save(filename, { type })\n      : super.save(filename, { type })\n  }\n}\n","import tumult from 'tumult'\nimport { normalize } from 'missing-math'\n\nexport default class Line {\n  // IMPORTANT: equation() should return a normalized value\n  constructor (equation = x => 0.5) {\n    this._equation = equation\n    this.points = []\n  }\n\n  compute (x, { force = false } = {}) {\n    if (force || this.points[x] === undefined) {\n      this.points[x] = this._equation(x)\n    }\n\n    return this.points[x]\n  }\n\n  static perlin ({\n    seed = null,\n    octaves = 2,\n    lacunarity = 2,\n    gain = 0.5,\n    resolution = 32\n  } = {}) {\n    const noise = new tumult.Perlin1(seed).transform(function (v) {\n      return normalize(this.gen(v / resolution), -1, 1)\n    })\n\n    return x => {\n      let y = 0\n      let amplitude = 0.5\n      let frequency = 1.0\n\n      for (let i = 0; i < octaves; i++) {\n        y += amplitude * noise(frequency * x)\n        frequency *= lacunarity\n        amplitude *= gain\n      }\n\n      return Math.sin(y)\n    }\n  }\n\n  static simplex ({\n    seed = null,\n    octaves = 2\n  } = {}) {\n    const frequency = Math.pow(2, octaves)\n    return new tumult.Simplex1(seed).transform(function (v) {\n      return (Math.sin(1 / this.gen(v / frequency)) + 1) / 2\n    })\n  }\n}\n","export default (arr, rng = Math.random) => arr[Math.floor(rng() * arr.length)]\n","import fastRandom from 'fast-random'\nimport arrayRandom from '../utils/array-random'\n\nlet seed = Date.now()\nlet randomizer = fastRandom(seed)\n\nexport default {\n  // NOTE: seed must be an integer\n  set seed (newSeed) {\n    seed = newSeed\n    randomizer = fastRandom(seed)\n  },\n\n  get seed () {\n    return seed\n  },\n\n  reset: () => {\n    randomizer = fastRandom(seed)\n  },\n\n  random: () => randomizer.nextFloat(),\n  randomOf: arr => arrayRandom(arr, randomizer.nextFloat),\n  randomFloat: (min, max) => randomizer.nextFloat() * (max - min) + min,\n  randomInt: (min, max) => Math.floor(randomizer.nextFloat() * (max - min) + min)\n}\n","import raf from '@internet/raf'\nimport { map } from 'missing-math'\nimport roundTo from '../utils/round-to'\nimport shuffle from '../utils/array-shuffle'\nimport median from '../utils/array-median'\nimport prng from '../utils/prng'\n\nexport const erode = (landscape, {\n  autoplay = true,\n\n  easing = 0.09,\n  noUpdateThreshold = 1,\n\n  columnWidth = 16,\n  snapToGrid = 8,\n  round = true,\n  breaks = 2,\n  minimizeVisualBreaks = false,\n  amplitude = [0, 200],\n  scaleFactor = 1\n} = {}) => {\n  if (landscape.ctx.isSVG) {\n    throw new Error('Eroding canvas only works on non SVG context for now')\n  }\n\n  const length = Math.ceil(landscape.width / columnWidth)\n  const buffer = landscape.copy()\n\n  let points = []\n  let shouldUpdate = autoplay\n\n  build()\n  raf.add(update)\n\n  return {\n    rebuild: build,\n    toggle: () => { shouldUpdate = !shouldUpdate },\n    play: () => { shouldUpdate = true },\n    pause: () => { shouldUpdate = false },\n    destroy: () => raf.remove(update)\n  }\n\n  function build () {\n    // Compute breakpoints at which a line will be swaped with the next\n    const breakpoints = []\n    for (let i = 0; i < breaks; i++) breakpoints.push(prng.randomInt(0, length))\n    breakpoints.push(length)\n\n    // Create a model of the future lines sections\n    let linesIndexes = []\n    breakpoints.sort((a, b) => a - b).forEach((breakpoint, index) => {\n      linesIndexes = linesIndexes.concat(new Array(breakpoint - linesIndexes.length).fill(index))\n    })\n\n    // Reassign points array with new values computed from corresponding lines\n    const lines = shuffle(landscape.grounds).slice(0, breaks + 1).map(g => g.line)\n    points = linesIndexes.map((lineIndex, index) => {\n      const value = lines[lineIndex].compute(index * columnWidth * scaleFactor)\n      return {\n        t: 1 - value,\n        v: points[index] ? points[index].v : 0,\n        lineIndex\n      }\n    })\n\n    // When options.minimizeVisualBreaks is set to true, make sure that each\n    // section starts where the previous one ends, to avoid creating vertical\n    // breaks\n    if (minimizeVisualBreaks) {\n      let offset = 0\n      points.forEach((point, index) => {\n        const previous = points[index - 1]\n        if (!previous) return\n\n        if (previous.lineIndex !== point.lineIndex) {\n          offset = previous.t - point.t\n        }\n\n        point.t += offset\n      })\n    }\n\n    // Minimize global up/down shift by cancelling the median movement\n    // Scale up vertically according to the amplitude argument\n    // If snapToGrid, round the target to the nearest on-grid value\n    const values = points.map(({t}) => t).sort((a, b) => a - b)\n    const m = median(values, { alreadyCloned: true, alreadySorted: true })\n    const min = values[0]\n    const max = values[values.length - 1]\n    points.forEach(p => {\n      p.t = map(p.t - m, min - m, max - m, amplitude[0], amplitude[1])\n      if (snapToGrid && snapToGrid > 0) p.t = roundTo(p.t, snapToGrid)\n    })\n  }\n\n  function update (dt) {\n    if (!shouldUpdate) return\n    shouldUpdate = false\n\n    landscape.background(landscape.backgroundColor)\n    points.forEach((p, index) => {\n      p.v += (p.t - p.v) * easing\n\n      // Continue updating if there are still relevant movements\n      if (Math.abs(p.t - p.v) > noUpdateThreshold) {\n        shouldUpdate = true\n      }\n\n      const x = index * columnWidth\n      const y = round ? Math.floor(p.v) : p.v\n      landscape.ctx.drawImage(buffer, x, 0, columnWidth, (buffer.height - 2), x, y, columnWidth, (buffer.height - 2))\n    })\n  }\n}\n\nexport default erode\n","export default (a, prng = Math.random) => {\n  var j, x, i\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(prng() * (i + 1))\n    x = a[i]\n    a[i] = a[j]\n    a[j] = x\n  }\n  return a\n}\n","export default (arr = [], {\n  alreadySorted = false,\n  alreadyCloned = false\n} = {}) => {\n  const values = alreadyCloned ? arr : arr.slice(0)\n  const numbers = alreadySorted ? values : values.sort((a, b) => a - b)\n\n  const middle = Math.floor(numbers.length / 2)\n  const isEven = numbers.length % 2 === 0\n  return isEven ? (numbers[middle] + numbers[middle - 1]) / 2 : numbers[middle]\n}\n","import anime from 'animejs'\n\n/* global Image */\n\nexport const hueRotate = (landscape, {\n  autoplay = true,\n  duration = 1000,\n  easing = 'linear',\n  loop = true,\n  containerClass = 'ffp-container'\n} = {}) => {\n  const parent = landscape.parent || landscape.canvas.parentNode\n\n  const container = document.createElement('div')\n  container.classList.add(containerClass)\n  parent.insertBefore(container, landscape.canvas.nextSibling)\n\n  landscape.canvas.style.display = 'none'\n\n  container.style.position = 'absolute'\n  container.style.width = landscape.width + 'px'\n  container.style.height = landscape.height + 'px'\n  container.style.backgroundColor = landscape.backgroundColor\n\n  landscape.grounds.forEach(ground => {\n    const img = new Image()\n    img.src = ground.sprite.toDataURL()\n    img.style.position = 'absolute'\n    container.appendChild(img)\n  })\n\n  const api = anime({\n    autoplay,\n    duration,\n    easing,\n    loop,\n    targets: container.querySelectorAll('img'),\n    filter: () => {\n      const off = Math.floor(Math.random() * 360)\n      const dir = Math.sign(Math.sin(Math.random() * Math.PI))\n      return [\n        `hue-rotate(${off}deg)`,\n        `hue-rotate(${off + 360 * dir}deg)`\n      ]\n    }\n  })\n\n  api.clear = () => {\n    container.remove()\n    landscape.canvas.style.display = ''\n  }\n\n  return api\n}\n\nexport default hueRotate\n","import randomOf from '../utils/array-random'\n\n/* eslint-disable comma-spacing, indent */\n\nexport const swatches = {\n    1: ['rgb(120,0,100)','rgb(160,15,150)','rgb(200,30,200)','rgb(255,50,255)','rgb(255,90,190)','rgb(255,120,140)','rgb(255,165,165)','rgb(255,215,235)'],\n    2: ['rgb(80,20,100)','rgb(110,30,130)','rgb(140,35,160)','rgb(170,40,190)','rgb(180,60,255)','rgb(190,100,255)','rgb(200,150,255)','rgb(210,200,255)'],\n    3: ['rgb(0,0,90)','rgb(0,0,160)','rgb(0,0,255)','rgb(0,120,255)','rgb(60,185,255)','rgb(0,200,255)','rgb(60,255,255)','rgb(220,255,255)'],\n    4: ['rgb(0,60,39)','rgb(0,90,59)','rgb(0,120,90)','rgb(0,151,120)','rgb(0,181,150)','rgb(52,231,200)','rgb(116,246,210)','rgb(179,254,225)'],\n    5: ['rgb(39,75,0)','rgb(27,95,15)','rgb(14,116,36)','rgb(0,170,43)','rgb(0,210,63)','rgb(0,252,29)','rgb(85,253,127)','rgb(178,253,157)'],\n    6: ['rgb(140,114,0)','rgb(180,139,0)','rgb(221,179,0)','rgb(255,218,0)','rgb(255,253,0)','rgb(255,249,88)','rgb(255,245,155)','rgb(255,254,218)'],\n    7: ['rgb(101,44,80)','rgb(141,58,57)','rgb(181,72,30)','rgb(201,88,0)','rgb(226,113,0)','rgb(255,137,0)','rgb(255,168,64)','rgb(255,199,147)'],\n    8: ['rgb(91,4,38)','rgb(151,11,57)','rgb(197,15,43)','rgb(222,18,27)','rgb(255,22,6)','rgb(255,53,49)','rgb(255,118,116)','rgb(255,189,189)'],\n    9: ['rgb(40,19,0)','rgb(71,39,17)','rgb(101,59,42)','rgb(136,115,99)','rgb(175,145,128)','rgb(210,179,158)','rgb(220,200,179)','rgb(236,220,199)'],\n   10: ['rgb(28,61,91)','rgb(59,100,131)','rgb(78,130,161)','rgb(98,161,181)','rgb(119,170,191)','rgb(150,180,201)','rgb(169,200,210)','rgb(199,220,230)'],\n   11: ['rgb(44,18,153)','rgb(85,28,202)','rgb(109,45,255)','rgb(130,82,255)','rgb(150,122,255)','rgb(160,171,255)','rgb(180,206,255)','rgb(194,235,255)'],\n   12: ['rgb(121,0,100)','rgb(161,12,151)','rgb(80,20,101)','rgb(110,30,131)','rgb(90,0,39)','rgb(151,0,58)'],\n   13: ['rgb(0,3,91)','rgb(0,9,162)','rgb(45,7,152)','rgb(85,26,203)','rgb(29,60,91)','rgb(59,100,131)'],\n   14: ['rgb(0,60,40)','rgb(0,90,60)','rgb(39,75,0)','rgb(28,95,15)','rgb(40,19,0)','rgb(70,39,17)'],\n   15: ['rgb(100,44,80)','rgb(141,58,58)','rgb(90,0,39)','rgb(151,0,58)','rgb(140,114,0)','rgb(181,139,0)'],\n   16: ['rgb(255,164,163)','rgb(255,215,235)','rgb(200,150,255)','rgb(210,200,255)','rgb(255,117,116)','rgb(255,189,189)'],\n   17: ['rgb(48,255,255)','rgb(219,255,255)','rgb(179,206,255)','rgb(194,236,255)','rgb(169,200,211)','rgb(200,220,231)'],\n   18: ['rgb(116,246,210)','rgb(178,255,225)','rgb(84,255,126)','rgb(179,255,157)','rgb(220,200,179)','rgb(235,220,199)'],\n   19: ['rgb(255,117,116)','rgb(255,189,189)','rgb(255,168,63)','rgb(255,199,146)','rgb(255,244,155)','rgb(255,255,219)'],\n   20: ['rgb(255,215,235)','rgb(210,200,255)','rgb(194,236,255)','rgb(219,255,255)','rgb(200,220,231)','rgb(178,255,225)'],\n   21: ['rgb(255,48,255)','rgb(181,62,255)','rgb(181,62,255)','rgb(0,21,255)','rgb(98,160,181)','rgb(51,231,200)'],\n   22: ['rgb(121,0,100)','rgb(80,20,101)','rgb(45,7,152)','rgb(0,3,91)','rgb(29,60,91)','rgb(0,60,40)'],\n   23: ['rgb(178,255,225)','rgb(179,255,157)','rgb(255,255,219)','rgb(255,199,146)','rgb(255,189,189)','rgb(235,220,199)'],\n   24: ['rgb(51,231,200)','rgb(0,255,28)','rgb(255,254,0)','rgb(255,137,0)','rgb(255,0,0)','rgb(100,59,43)'],\n   25: ['rgb(0,60,40)','rgb(39,75,0)','rgb(140,114,0)','rgb(100,44,80)','rgb(90,0,39)','rgb(40,19,0)'],\n   26: ['rgb(15,115,37)','rgb(0,170,43)','rgb(0,210,63)','rgb(255,117,138)','rgb(255,164,163)','rgb(255,215,235)'],\n   27: ['rgb(78,130,161)','rgb(98,160,181)','rgb(119,170,191)','rgb(190,101,255)','rgb(200,150,255)','rgb(210,200,255)'],\n   28: ['rgb(181,73,31)','rgb(201,87,0)','rgb(226,112,0)','rgb(0,221,255)','rgb(48,255,255)','rgb(219,255,255)'],\n   29: ['rgb(100,59,43)','rgb(135,114,99)','rgb(175,144,129)','rgb(8,239,34)','rgb(84,255,126)','rgb(179,255,157)'],\n   30: ['rgb(201,28,202)','rgb(255,48,255)','rgb(255,87,190)','rgb(159,171,255)','rgb(179,206,255)','rgb(194,236,255)'],\n   31: ['rgb(0,120,90)','rgb(0,150,120)','rgb(0,181,150)','rgb(255,53,50)','rgb(255,117,116)','rgb(255,189,189)'],\n   32: ['rgb(221,179,0)','rgb(255,219,0)','rgb(255,254,0)','rgb(51,231,200)','rgb(116,246,210)','rgb(178,255,225)'],\n   33: ['rgb(0,21,255)','rgb(0,122,255)','rgb(54,186,255)','rgb(210,179,158)','rgb(220,200,179)','rgb(235,220,199)'],\n   34: ['rgb(141,35,162)','rgb(171,40,192)','rgb(181,62,255)','rgb(255,137,0)','rgb(255,168,63)','rgb(255,199,146)'],\n   35: ['rgb(196,0,44)','rgb(222,0,28)','rgb(255,0,0)','rgb(149,180,201)','rgb(169,200,211)','rgb(200,220,231)'],\n   36: ['rgb(110,46,255)','rgb(130,82,255)','rgb(150,121,255)','rgb(255,249,88)','rgb(255,244,155)','rgb(255,255,219)'],\n   37: ['rgb(181,73,31)','rgb(223,20,42)','rgb(227,116,0)','rgb(254,65,61)','rgb(255,170,69)','rgb(255,191,189)'],\n   38: ['rgb(221,179,0)','rgb(202,91,12)','rgb(254,254,0)','rgb(255,139,0)','rgb(255,244,155)','rgb(255,200,149)'],\n   39: ['rgb(142,44,163)','rgb(130,89,255)','rgb(181,73,255)','rgb(157,172,255)','rgb(200,153,255)','rgb(193,236,255)'],\n   40: ['rgb(77,130,162)','rgb(0,149,119)','rgb(118,170,191)','rgb(44,229,198)','rgb(170,200,210)','rgb(178,254,224)'],\n   41: ['rgb(202,47,203)','rgb(172,50,193)','rgb(255,96,194)','rgb(191,107,255)','rgb(255,166,166)','rgb(210,201,255)'],\n   42: ['rgb(11,114,33)','rgb(254,218,0)','rgb(0,207,54)','rgb(255,248,87)','rgb(82,253,121)','rgb(255,253,218)'],\n   43: ['rgb(108,58,254)','rgb(0,125,254)','rgb(148,125,255)','rgb(0,220,255)','rgb(180,206,255)','rgb(219,255,255)'],\n   44: ['rgb(198,17,52)','rgb(254,68,255)','rgb(255,24,24)','rgb(255,122,141)','rgb(255,122,121)','rgb(255,216,235)'],\n   45: ['rgb(101,59,43)','rgb(98,160,181)','rgb(177,145,130)','rgb(149,180,201)','rgb(221,200,179)','rgb(200,220,229)'],\n   46: ['rgb(1,37,255)','rgb(1,168,36)','rgb(45,186,255)','rgb(1,252,1)','rgb(35,254,255)','rgb(178,252,153)'],\n   47: ['rgb(0,119,87)','rgb(136,114,100)','rgb(1,180,151)','rgb(211,180,159)','rgb(114,246,207)','rgb(236,219,199)'],\n   48: ['rgb(141,114,1)','rgb(71,40,19)','rgb(222,180,0)','rgb(136,114,100)','rgb(255,253,0)','rgb(211,180,159)'],\n   49: ['rgb(91,3,41)','rgb(28,94,7)','rgb(198,17,52)','rgb(1,168,36)','rgb(255,23,23)','rgb(0,251,0)'],\n   50: ['rgb(0,6,92)','rgb(57,101,130)','rgb(1,37,255)','rgb(96,161,181)','rgb(45,186,255)','rgb(149,180,200)'],\n   51: ['rgb(122,13,102)','rgb(1,19,163)','rgb(202,47,203)','rgb(0,125,254)','rgb(255,97,194)','rgb(0,220,255)'],\n   52: ['rgb(41,20,0)','rgb(142,61,60)','rgb(101,59,43)','rgb(202,91,12)','rgb(176,144,129)','rgb(255,139,0)'],\n   53: ['rgb(40,74,0)','rgb(84,37,203)','rgb(11,114,33)','rgb(130,89,255)','rgb(0,208,54)','rgb(157,172,255)'],\n   54: ['rgb(82,25,102)','rgb(152,11,63)','rgb(142,44,163)','rgb(223,20,42)','rgb(181,73,255)','rgb(254,65,61)'],\n   55: ['rgb(0,59,39)','rgb(181,140,0)','rgb(0,119,89)','rgb(254,218,0)','rgb(0,179,149)','rgb(255,248,87)'],\n   56: ['rgb(28,61,92)','rgb(111,37,132)','rgb(77,130,162)','rgb(172,50,193)','rgb(118,170,191)','rgb(191,107,255)'],\n   57: ['rgb(101,47,81)','rgb(0,89,57)','rgb(183,76,40)','rgb(0,149,119)','rgb(229,115,0)','rgb(44,229,198)'],\n   58: ['rgb(44,18,153)','rgb(163,31,153)','rgb(108,58,254)','rgb(254,68,255)','rgb(148,125,255)','rgb(255,122,141)'],\n   59: ['rgb(198,17,52)','rgb(223,20,42)','rgb(255,96,192)','rgb(255,122,141)','rgb(255,170,69)','rgb(255,199,148)'],\n   60: ['rgb(202,47,203)','rgb(254,68,255)','rgb(181,73,255)','rgb(191,107,255)','rgb(255,244,155)','rgb(254,254,218)'],\n   61: ['rgb(221,179,0)','rgb(254,218,0)','rgb(0,207,54)','rgb(1,252,1)','rgb(35,254,255)','rgb(219,255,255)'],\n   62: ['rgb(108,58,254)','rgb(128,90,255)','rgb(118,170,191)','rgb(149,180,201)','rgb(82,253,121)','rgb(178,252,153)'],\n   63: ['rgb(101,59,43)','rgb(137,115,101)','rgb(229,115,0)','rgb(255,139,0)','rgb(169,202,211)','rgb(200,220,231)'],\n   64: ['rgb(0,119,89)','rgb(0,149,119)','rgb(150,125,255)','rgb(157,172,255)','rgb(114,244,208)','rgb(178,254,224)'],\n   65: ['rgb(182,75,39)','rgb(202,91,12)','rgb(255,253,0)','rgb(255,248,87)','rgb(200,153,255)','rgb(210,201,254)'],\n   66: ['rgb(77,130,162)','rgb(98,160,181)','rgb(255,24,24)','rgb(254,65,61)','rgb(255,166,166)','rgb(255,216,235)'],\n   67: ['rgb(142,44,163)','rgb(172,50,193)','rgb(45,186,255)','rgb(0,220,255)','rgb(221,200,179)','rgb(236,219,199)'],\n   68: ['rgb(11,114,33)','rgb(1,168,36)','rgb(0,179,149)','rgb(44,229,198)','rgb(180,206,255)','rgb(193,236,255)'],\n   69: ['rgb(1,37,255)','rgb(0,125,254)','rgb(177,145,130)','rgb(211,180,159)','rgb(254,122,120)','rgb(255,191,191)'],\n   70: ['rgb(122,13,102)','rgb(163,31,153)','rgb(1,37,255)','rgb(0,125,254)','rgb(0,207,54)','rgb(1,252,1)','rgb(255,170,69)','rgb(255,200,149)'],\n   71: ['rgb(142,44,163)','rgb(172,50,193)','rgb(0,179,149)','rgb(44,229,198)','rgb(255,244,155)','rgb(254,254,218)','rgb(91,3,41)','rgb(152,11,63)'],\n   72: ['rgb(45,186,255)','rgb(0,220,255)','rgb(82,253,121)','rgb(178,252,153)','rgb(101,47,81)','rgb(142,61,60)','rgb(101,59,43)','rgb(136,114,100)'],\n   73: ['rgb(114,244,208)','rgb(178,254,224)','rgb(141,114,1)','rgb(181,140,0)','rgb(255,23,23)','rgb(254,65,61)','rgb(170,200,210)','rgb(200,220,231)'],\n   74: ['rgb(40,74,0)','rgb(28,94,7)','rgb(183,76,40)','rgb(202,91,12)','rgb(177,145,130)','rgb(211,180,159)','rgb(180,206,255)','rgb(194,235,255)'],\n   75: ['rgb(202,47,203)','rgb(254,68,255)','rgb(222,180,0)','rgb(254,218,0)','rgb(255,122,121)','rgb(255,191,191)','rgb(28,61,92)','rgb(59,100,132)'],\n   76: ['rgb(181,73,255)','rgb(191,107,255)','rgb(227,116,0)','rgb(255,139,0)','rgb(221,200,179)','rgb(236,219,199)','rgb(44,18,153)','rgb(84,37,203)'],\n   77: ['rgb(200,153,255)','rgb(210,201,255)','rgb(0,59,39)','rgb(0,89,59)','rgb(41,20,1)','rgb(71,40,19)','rgb(108,58,254)','rgb(130,89,255)'],\n   78: ['rgb(255,96,194)','rgb(255,122,141)','rgb(35,254,255)','rgb(219,255,255)','rgb(11,114,33)','rgb(1,168,36)','rgb(198,17,52)','rgb(222,19,41)'],\n   79: ['rgb(82,25,102)','rgb(111,37,132)','rgb(0,119,89)','rgb(0,149,117)','rgb(255,253,0)','rgb(77,130,162)','rgb(77,130,162)','rgb(98,160,181)'],\n   80: ['rgb(255,166,165)','rgb(255,216,235)','rgb(0,6,92)','rgb(1,19,163)','rgb(118,170,191)','rgb(148,180,201)','rgb(150,125,255)','rgb(157,172,255)'],\n   81: ['rgb(41,20,1)','rgb(71,40,19)','rgb(108,58,254)','rgb(130,89,255)','rgb(255,96,194)','rgb(255,122,141)'],\n   82: ['rgb(82,25,102)','rgb(111,37,132)','rgb(0,119,89)','rgb(43,121,107)','rgb(255,253,0)','rgb(255,248,87)'],\n   83: ['rgb(76,129,160)','rgb(98,160,181)','rgb(255,166,166)','rgb(255,216,235)','rgb(0,6,92)','rgb(1,19,163)'],\n   84: ['rgb(181,73,255)','rgb(191,107,255)','rgb(227,116,0)','rgb(255,140,1)','rgb(221,200,179)','rgb(235,220,199)'],\n   85: ['rgb(114,244,208)','rgb(179,254,224)','rgb(141,114,1)','rgb(181,140,0)','rgb(255,24,24)','rgb(254,65,61)'],\n   86: ['rgb(177,145,130)','rgb(211,180,159)','rgb(180,206,255)','rgb(193,236,255)','rgb(202,47,203)','rgb(254,68,255)'],\n   87: ['rgb(255,244,155)','rgb(254,254,218)','rgb(91,3,41)','rgb(152,11,63)','rgb(45,186,255)','rgb(0,220,255)'],\n   88: ['rgb(170,200,210)','rgb(200,220,231)','rgb(38,74,0)','rgb(28,94,7)','rgb(183,76,40)','rgb(202,91,12)'],\n   89: ['rgb(121,12,101)','rgb(163,31,153)','rgb(1,37,255)','rgb(0,125,254)','rgb(0,207,54)','rgb(1,252,0)'],\n   90: ['rgb(255,170,67)','rgb(255,200,149)','rgb(142,44,163)','rgb(172,50,193)','rgb(0,179,147)','rgb(44,229,198)'],\n   91: ['rgb(35,255,255)','rgb(219,255,255)','rgb(11,114,33)','rgb(1,168,36)','rgb(198,16,54)','rgb(223,20,42)'],\n   92: ['rgb(222,180,0)','rgb(254,218,0)','rgb(255,121,118)','rgb(255,191,191)','rgb(28,61,92)','rgb(57,101,130)'],\n   93: ['rgb(44,18,153)','rgb(84,37,203)','rgb(200,153,255)','rgb(210,201,255)','rgb(0,59,39)','rgb(0,89,59)'],\n   94: ['rgb(82,253,121)','rgb(178,252,153)','rgb(101,47,81)','rgb(93,93,93)','rgb(101,59,43)','rgb(137,115,101)'],\n   95: ['rgb(118,170,191)','rgb(93,93,93)','rgb(150,125,255)','rgb(157,172,255)','rgb(122,13,102)','rgb(163,31,153)'],\n   96: ['rgb(40,74,0)','rgb(27,95,10)','rgb(142,44,163)','rgb(172,50,193)','rgb(255,96,194)','rgb(255,122,141)'],\n   97: ['rgb(0,6,92)','rgb(0,21,163)','rgb(222,180,0)','rgb(254,218,0)','rgb(0,207,54)','rgb(1,252,1)'],\n   98: ['rgb(93,69,82)','rgb(152,11,63)','rgb(1,37,255)','rgb(0,125,254)','rgb(181,73,255)','rgb(191,107,255)'],\n   99: ['rgb(141,114,1)','rgb(181,140,0)','rgb(77,130,162)','rgb(98,160,181)','rgb(148,125,255)','rgb(157,172,255)'],\n  100: ['rgb(44,18,153)','rgb(84,37,203)','rgb(0,119,89)','rgb(0,149,119)','rgb(174,145,129)','rgb(212,180,159)'],\n  101: ['rgb(28,61,92)','rgb(59,100,132)','rgb(202,47,203)','rgb(254,68,255)','rgb(227,116,0)','rgb(255,139,0)'],\n  102: ['rgb(122,13,102)','rgb(163,31,153)','rgb(101,59,43)','rgb(137,115,101)','rgb(255,24,24)','rgb(254,65,61)'],\n  103: ['rgb(101,47,81)','rgb(142,61,60)','rgb(198,17,52)','rgb(223,20,42)','rgb(45,186,255)','rgb(0,220,255)'],\n  104: ['rgb(0,59,39)','rgb(0,89,59)','rgb(183,76,40)','rgb(202,90,14)','rgb(255,253,0)','rgb(255,248,87)'],\n  105: ['rgb(82,25,102)','rgb(111,37,132)','rgb(108,58,254)','rgb(130,89,255)','rgb(118,170,191)','rgb(149,180,201)'],\n  106: ['rgb(41,20,1)','rgb(71,40,19)','rgb(11,114,33)','rgb(11,114,33)','rgb(1,168,36)','rgb(44,229,198)']\n}\n\nexport default swatches\n\nexport const random = (prng = Math.random) => {\n  const index = randomOf(Object.keys(swatches), prng)\n  const swatch = swatches[index]\n  return { index, swatch }\n}\n","import Gradient from './abstractions/Gradient'\nimport Ground from './abstractions/Ground'\nimport Landscape from './abstractions/Landscape'\nimport Line from './abstractions/Line'\nimport makePattern from './controllers/make-pattern'\nimport SYMBOLS from './controllers/symbols'\nimport randomOf from './utils/array-random'\nimport prng from './utils/prng'\n\nexport const generate = ({\n  units = [24],\n  width = 240,\n  height = 240,\n  groundsLength = 2,\n\n  percentOfStraightLines = 0.5,\n  percentOfGradients = 0.5,\n  percentOfSimplexGradients = 0.1,\n\n  swatch = ['rgb(0, 0, 0)'],\n  backgroundColor = 'rgb(255, 255, 255)',\n  symbols = ['debug'],\n\n  canvas = null,\n  random = prng.random\n} = {}) => {\n  const patterns = symbols.map(symbolName => makePattern(SYMBOLS[symbolName]))\n\n  const grounds = new Array(groundsLength).fill(true).map((_, index, grounds) => {\n    const rnd = random() * 100\n    const unit = randomOf(units, random)\n\n    const foregroundColor = randomOf(swatch, random)\n    const pattern = randomOf(patterns, random)\n\n    const gradient = rnd > percentOfGradients * 100\n      ? Gradient.fix(random())\n      : rnd < percentOfSimplexGradients * 100\n        ? Gradient.simplex({ seed: rnd })\n        : Gradient.linear(rnd)\n\n    const offy = height * (1 - (index / (grounds.length))) ** (random() * 3)\n    const line = new Line(x => {\n      if (rnd < percentOfStraightLines * 100) {\n        return offy / height\n      } else {\n        const n = Line.perlin({\n          seed: rnd,\n          octaves: 3,\n          resolution: 64,\n          lacunarity: 2,\n          gain: 0.5\n        })(x / (2 + (rnd / 100) * 3))\n        return (offy / height) / 2 + n\n      }\n    })\n\n    return new Ground({\n      unit, line, gradient, width, height, foregroundColor, backgroundColor, pattern\n    })\n  })\n\n  return new Landscape(grounds, {\n    canvas,\n    backgroundColor\n  })\n}\n\nexport { prng }\nexport { erode } from './controllers/erode'\nexport { hueRotate } from './controllers/hue-rotate'\nexport { swatches } from './controllers/swatches'\n"],"names":["Gradient","f","x","y","width","height","compute","bind","this","ref","ctx","color","fillStyle","fillRect","symbol","unit","isSVG","beginSVGGroup","background","backgroundColor","foregroundColor","scale","endSVGGroup","path","beginPath","forEach","point","index","value","nearest","Math","floor","steps","step","methods","Object","getOwnPropertyNames","filter","prop","normalize","simplex","frequency","pow","octaves","tumult","Simplex2","seed","gen","power","linear","alpha","i","j","theta","radians","lerp","sin","cos","random","rng","fix","const","symbols","empty","debug","strokeStyle","lineWidth","strokeRect","square","thickness","roundTo","square_offset","vertical_line","vertical_line_offset","horizontal_line","horizontal_line_offset","diagonal","moveTo","lineTo","fill","diamond","drawPath","lineclip","polygon","circle","diameter","push","closePath","ffp","gradient","split","char","length","font","fillText","Ground","line","makePattern","pattern","grid","cells","_populate","setCell","cell","hasCell","isInFrontOf","setBehind","grounds","column","shouldRender","some","ground","isEmpty","find","_updateAABB","aabb","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","xmin","ymin","xmax","ymax","render","createSprite","Error","sprite","canvas","document","createElement","createCanvasFromContext","getContext","SVGCanvas","style","Canvas","save","restore","group","fn","context","svg","getSvg","serializedSvg","getSerializedSvg","toBlob","type","isSupportedMimeType","Blob","Promise","resolve","didMount","mount","parent","sibling","mounted","el","insertBefore","appendChild","copy","drawImage","clear","querySelector","innerHTML","clearRect","SUPPORTED_MIME_TYPES","includes","filename","Date","now","then","FileSaver","saveAs","$await_1","Landscape","super","prototypeAccessors","_grounds","foregrounds","map","Boolean","ensureSVGContext","Line","equation","_equation","points","arr","force","undefined","perlin","noise","Perlin1","transform","v","resolution","amplitude","lacunarity","gain","Simplex1","let","randomizer","fastRandom","newSeed","reset","nextFloat","randomOf","arrayRandom","randomFloat","min","max","randomInt","erode","landscape","ceil","columnWidth","buffer","shouldUpdate","autoplay","build","raf","add","update","rebuild","toggle","play","pause","destroy","remove","breakpoints","breaks","prng","linesIndexes","sort","a","b","breakpoint","concat","Array","lines","shuffle","slice","g","lineIndex","t","scaleFactor","minimizeVisualBreaks","offset","previous","values","m","alreadyCloned","numbers","alreadySorted","middle","median","p","snapToGrid","dt","easing","abs","noUpdateThreshold","round","hueRotate","parentNode","container","classList","containerClass","nextSibling","display","position","img","Image","src","toDataURL","api","anime","duration","loop","targets","querySelectorAll","off","sign","PI","swatches","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","generate","patterns","symbolName","SYMBOLS","groundsLength","_","rnd","units","swatch","percentOfGradients","percentOfSimplexGradients","offy","percentOfStraightLines","n"],"mappings":"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"}